/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DeliveryStatusService } from "../deliveryStatus.service";
import { DeliveryStatusCreateInput } from "./DeliveryStatusCreateInput";
import { DeliveryStatus } from "./DeliveryStatus";
import { DeliveryStatusFindManyArgs } from "./DeliveryStatusFindManyArgs";
import { DeliveryStatusWhereUniqueInput } from "./DeliveryStatusWhereUniqueInput";
import { DeliveryStatusUpdateInput } from "./DeliveryStatusUpdateInput";

export class DeliveryStatusControllerBase {
  constructor(protected readonly service: DeliveryStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DeliveryStatus })
  async createDeliveryStatus(
    @common.Body() data: DeliveryStatusCreateInput
  ): Promise<DeliveryStatus> {
    return await this.service.createDeliveryStatus({
      data: data,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DeliveryStatus] })
  @ApiNestedQuery(DeliveryStatusFindManyArgs)
  async deliveryStatuses(
    @common.Req() request: Request
  ): Promise<DeliveryStatus[]> {
    const args = plainToClass(DeliveryStatusFindManyArgs, request.query);
    return this.service.deliveryStatuses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deliveryStatus(
    @common.Param() params: DeliveryStatusWhereUniqueInput
  ): Promise<DeliveryStatus | null> {
    const result = await this.service.deliveryStatus({
      where: params,
      select: {
        createdAt: true,
        id: true,
        statusName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDeliveryStatus(
    @common.Param() params: DeliveryStatusWhereUniqueInput,
    @common.Body() data: DeliveryStatusUpdateInput
  ): Promise<DeliveryStatus | null> {
    try {
      return await this.service.updateDeliveryStatus({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DeliveryStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDeliveryStatus(
    @common.Param() params: DeliveryStatusWhereUniqueInput
  ): Promise<DeliveryStatus | null> {
    try {
      return await this.service.deleteDeliveryStatus({
        where: params,
        select: {
          createdAt: true,
          id: true,
          statusName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

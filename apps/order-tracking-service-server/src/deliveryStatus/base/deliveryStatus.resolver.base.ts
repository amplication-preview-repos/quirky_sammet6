/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeliveryStatus } from "./DeliveryStatus";
import { DeliveryStatusCountArgs } from "./DeliveryStatusCountArgs";
import { DeliveryStatusFindManyArgs } from "./DeliveryStatusFindManyArgs";
import { DeliveryStatusFindUniqueArgs } from "./DeliveryStatusFindUniqueArgs";
import { CreateDeliveryStatusArgs } from "./CreateDeliveryStatusArgs";
import { UpdateDeliveryStatusArgs } from "./UpdateDeliveryStatusArgs";
import { DeleteDeliveryStatusArgs } from "./DeleteDeliveryStatusArgs";
import { DeliveryStatusService } from "../deliveryStatus.service";
@graphql.Resolver(() => DeliveryStatus)
export class DeliveryStatusResolverBase {
  constructor(protected readonly service: DeliveryStatusService) {}

  async _deliveryStatusesMeta(
    @graphql.Args() args: DeliveryStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DeliveryStatus])
  async deliveryStatuses(
    @graphql.Args() args: DeliveryStatusFindManyArgs
  ): Promise<DeliveryStatus[]> {
    return this.service.deliveryStatuses(args);
  }

  @graphql.Query(() => DeliveryStatus, { nullable: true })
  async deliveryStatus(
    @graphql.Args() args: DeliveryStatusFindUniqueArgs
  ): Promise<DeliveryStatus | null> {
    const result = await this.service.deliveryStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeliveryStatus)
  async createDeliveryStatus(
    @graphql.Args() args: CreateDeliveryStatusArgs
  ): Promise<DeliveryStatus> {
    return await this.service.createDeliveryStatus({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DeliveryStatus)
  async updateDeliveryStatus(
    @graphql.Args() args: UpdateDeliveryStatusArgs
  ): Promise<DeliveryStatus | null> {
    try {
      return await this.service.updateDeliveryStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DeliveryStatus)
  async deleteDeliveryStatus(
    @graphql.Args() args: DeleteDeliveryStatusArgs
  ): Promise<DeliveryStatus | null> {
    try {
      return await this.service.deleteDeliveryStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
